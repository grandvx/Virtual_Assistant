
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer


from pathlib import Path

# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage
import tkinter as tk
from PIL import Image, ImageTk
import pyttsx3
import time
import speech_recognition as sr
import random
import threading
import webbrowser
import pywhatkit
import datetime
import wikipedia
from wikipedia.exceptions import PageError
import pyjokes
import requests
#from tkinter.constants import DISABLED, NORMAL

#Variables-----------------------------------------------------------
r = sr.Recognizer()
keywords = [("pixel", 1e-20), ("Hey pixel", 1e-20), ] # Αρχικοποιούμε τις λέξης με τις οποίες θα μας ακούει
source = sr.Microphone() # Το μικρόφωνο που θα χρησιμοποιούμε

OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path(r"C:\Users\keray\Documents\pA\Assistant-master\build\assets\frame0")

#Funtcions-----------------------------------------------------------
def Speak(text):
    rate = 150 #Ελέγχει την ταχύτητα που μιλάει ο personal assistant
    engine = pyttsx3.init() #Αρχικοποιεί την μηχανή για να μιλάει
    voices = engine.getProperty('voices') #ορίζει την ιδιότητες για την ομιλία
    engine.setProperty('voice', voices[1].id) # 0 για αντρική φωνή , 1 για γυναικεία
    engine.setProperty('rate', rate) # Προσαρμόζει την ταχύτητα της ομιλίας
    engine.say(text) # Λέει στην Python να μιλήσει τα περιεχόμενα του text
    engine.runAndWait() #Περιμένει να τελιώσει το πρόγραμμα την ομιλία και μετά συνεχίζει το πρόγραμμα

def callback(recognizer, audio):
    try:
        speech_as_text = recognizer.recognize_sphinx(audio, keyword_entries=keywords)
        print(speech_as_text)
        if "Pixel" in speech_as_text or "hey Pixel":
            Speak("Yes sir?")
            recognize_main()
    except sr.UnknownValueError:
        print("Oops! Didn't catch that")

def start_recognizer():
    print("Waiting for a keyword...")
    r.listen_in_background(source, callback)
    #time.sleep(1000000)
    
def checkButtonState():
    if button_1['state'] == tk.NORMAL:
        button_1.config(state=tk.DISABLED)
        start_recognizer()
    else:
        print("Button is disabled")

def recognize_main():
    global stop_event  # declare stop_event as global
    r = sr.Recognizer()
    with sr.Microphone() as source:
        print("Say something!")
        audio = r.listen(source)
    data = ""
    try:
        data = r.recognize_google(audio)
        data = data.lower()
        print("You said: " + data)
        if "how are you" in data:
            Speak("I am Fine")
        elif "hello" in data:
            Speak("Hi there")
        elif 'play' in data:
            song = data.replace('play', '')
            Speak('playing ' + song)
            pywhatkit.playonyt(song)
        elif 'time' in data:
            time = datetime.datetime.now().strftime('%I:%M %p')
            print('Current time is ' + time)
            Speak('Current time is ' + time)
        elif 'who is' in data:
            person = data.replace('who is', '').strip()  # Replace 'who is' and strip extra spaces
            try:
                info = wikipedia.summary(person, sentences=2)
                print(info)
                Speak(info)
            except wikipedia.exceptions.PageError:
                print(f"Sorry, I couldn't find information about {person}.")
                Speak(f"Sorry, I couldn't find information about {person}.")
        elif 'joke' in data:
            Speak(pyjokes.get_joke()) 
            print(pyjokes.get_joke())
        elif 'open youtube' in data:
            webbrowser.open("https://www.youtube.com/")
        elif 'open google' in data:
            webbrowser.open("https://www.google.com/")    
        elif 'bye-bye' in data:
            Speak("Goodbye!")
            stop_event.set()  # Set the stop event to stop the voice recognition loop
        elif 'weather' in data:
        # Replace 'YOUR_API_KEY' with your OpenWeatherMap API key
            api_key = 'f57394a82fbb2dedf23100a2b2e709d2'

        # Get the city name from user input (e.g., "What's the weather in Paris?")
            city = data.split('weather in ')[-1]

        # Define the URL for the weather API
            url = f'http://api.openweathermap.org/data/2.5/weather?q={city}&appid={api_key}'

        # Make a GET request to the weather API
            response = requests.get(url)

            if response.status_code == 200:
                weather_data = response.json()
                # Extract relevant weather information from the API response
                main_weather = weather_data['weather'][0]['main']
                description = weather_data['weather'][0]['description']
                temperature = weather_data['main']['temp']
                temperature = round(temperature - 273.15, 2)  # Convert temperature to Celsius

                weather_message = f"The weather in {city} is {main_weather} ({description}) with a temperature of {temperature}°C."
                print(weather_message)
                Speak(weather_message)
            else:
                print("Could not fetch weather data. Please try again later.")
                Speak("Could not fetch weather data. Please try again later.")
        else:
            Speak("I'm sorry sir, I did not understand your request")
    except sr.UnknownValueError:
        print("Pixel did not understand your request")
    except sr.RequestError as e:
        print("Could not request results from Google Speech Recognition service; {0}".format(e))


def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)


window = Tk()

window.geometry("400x600")
window.configure(bg = "#FFFFFF")


canvas = Canvas(
    window,
    bg = "#FFFFFF",
    height = 600,
    width = 400,
    bd = 0,
    highlightthickness = 0,
    relief = "ridge"
)

canvas.place(x = 0, y = 0)
canvas.create_rectangle(
    0.0,
    0.0,
    400.0,
    600.0,
    fill="#2F7470",
    outline="")

button_image_1 = PhotoImage(
    file=relative_to_assets("button_1.png"))
button_1 = Button(
    image=button_image_1,
    borderwidth=0,
    highlightthickness=0,
    command= checkButtonState,
    relief="flat"
)
button_1.place(
    x=156.0,
    y=443.0,
    width=95.0,
    height=74.0
)

button_image_2 = PhotoImage(
    file=relative_to_assets("button_2.png"))
button_2 = Button(
    image=button_image_2,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: print("button_2 clicked"),
    relief="groove"
)
button_2.place(
    x=14.0,
    y=5.0,
    width=44.0,
    height=42.0
)

entry_image_1 = PhotoImage(
    file=relative_to_assets("entry_1.png"))
entry_bg_1 = canvas.create_image(
    202.0,
    375.5,
    image=entry_image_1
)
entry_1 = Text(
    bd=0,
    bg="#2F615B",
    fg="#000716",
    highlightthickness=0
)
entry_1.place(
    x=9.0,
    y=345.0,
    width=386.0,
    height=59.0
)

image_image_1 = PhotoImage(
    file=relative_to_assets("image_1.png"))
image_1 = canvas.create_image(
    219.0,
    209.0,
    image=image_image_1
)
window.resizable(False, False)
window.mainloop()
